from random import randint
from itertools import accumulate
from matplotlib import pyplot as plt
plt.style.use('seaborn')

# rand = [1000]
rand = [1000]+[randint(-10,10) for i in range(359)]
rand = list(accumulate(rand))
df = {idx:val for idx,val in enumerate(rand)}
print(df)
def money(x,y):
    return (abs(df[x]-df[y]))

def gen_peaks(df):
    peak = dict()
    truf = dict()
    for k in df:
        cur = df.get(k)
        if (df.get(k - 1, 1000) > cur < df.get(k + 1, 1000)):
            truf[k] = cur
        if (df.get(k - 1, -1000) < cur > df.get(k + 1, -1000)):
            peak[k] = cur
    return peak, truf

def scatmake(df,plist):
    d = [None]* len(df)
    for k in plist:
        d[k] = df[k]
    return d


mx = []
mn = []
short_not  = []
def graph(df,low,high,peak,truf,short=0):
    global mx,mn

    if abs(high-low) >=1:
        pk = list(filter(lambda k: low <= k <= high, peak))
        tf = list(filter(lambda k: low <= k <= high, truf))
        x =  max(pk, key=peak.get,default=None)
        y =  min(tf, key=truf.get, default=None)
        if x !=None and y!=None:
            if short == 0:
                mx.append(x)
                mn.append(y)
                short_not.append(x<y)

            elif short == 1:
                if  x>y:
                    mx.append(x)
                    mn.append(y)
                    short_not.append(x < y)
            elif short == -1:
                if x < y:
                    mx.append(x)
                    mn.append(y)
                    short_not.append(x < y)

            s, b = (x, y) if x < y else (y, x)
            graph(df, low, s, peak, truf, short)
            graph(df, b, high, peak, truf, short)
            if x > y and short in [0,-1]:
                graph(df, s+1 , b-1 , peak, truf, -1)
            elif x < y :
                graph(df, s+1 , b-1 , peak, truf, 1)



if __name__ == '__main__':
    # df = {0: 1000, 1: 995, 2: 1004, 3: 996, 4: 986, 5: 996, 6: 1005, 7: 1014, 8: 1007, 9: 1016, 10: 1009, 11: 1003, 12: 998, 13: 1000, 14: 994, 15: 1001, 16: 1006, 17: 1013, 18: 1013, 19: 1014, 20: 1018, 21: 1013, 22: 1009, 23: 1017, 24: 1013, 25: 1005, 26: 1006, 27: 1013, 28: 1021, 29: 1015, 30: 1014, 31: 1007, 32: 1016, 33: 1019, 34: 1024, 35: 1033, 36: 1025, 37: 1024, 38: 1032, 39: 1033, 40: 1043, 41: 1045, 42: 1052, 43: 1053, 44: 1044, 45: 1049, 46: 1054, 47: 1062, 48: 1065, 49: 1069, 50: 1064, 51: 1065, 52: 1060, 53: 1069, 54: 1073, 55: 1064, 56: 1062, 57: 1055, 58: 1062, 59: 1068, 60: 1062, 61: 1059, 62: 1068, 63: 1077, 64: 1068, 65: 1058, 66: 1062, 67: 1063, 68: 1072, 69: 1065, 70: 1075, 71: 1070, 72: 1065, 73: 1068, 74: 1069, 75: 1060, 76: 1052, 77: 1046, 78: 1044, 79: 1047, 80: 1045, 81: 1044, 82: 1041, 83: 1043, 84: 1036, 85: 1043, 86: 1037, 87: 1039, 88: 1039, 89: 1037, 90: 1029, 91: 1020, 92: 1015, 93: 1011, 94: 1019, 95: 1018, 96: 1023, 97: 1020, 98: 1012, 99: 1005, 100: 1003, 101: 993, 102: 993, 103: 993, 104: 992, 105: 995, 106: 997, 107: 1000, 108: 1008, 109: 1010, 110: 1008, 111: 1010, 112: 1014, 113: 1022, 114: 1022, 115: 1019, 116: 1025, 117: 1016, 118: 1013, 119: 1006, 120: 1004, 121: 994, 122: 998, 123: 998, 124: 990, 125: 980, 126: 986, 127: 990, 128: 983, 129: 977, 130: 979, 131: 969, 132: 966, 133: 961, 134: 962, 135: 967, 136: 962, 137: 962, 138: 966, 139: 971, 140: 971, 141: 974, 142: 984, 143: 983, 144: 973, 145: 970, 146: 968, 147: 972, 148: 964, 149: 971, 150: 968, 151: 966, 152: 958, 153: 965, 154: 970, 155: 979, 156: 969, 157: 973, 158: 963, 159: 966, 160: 973, 161: 972, 162: 978, 163: 979, 164: 983, 165: 984, 166: 981, 167: 991, 168: 993, 169: 984, 170: 984, 171: 974, 172: 969, 173: 960, 174: 952, 175: 953, 176: 959, 177: 952, 178: 962, 179: 966, 180: 976, 181: 982, 182: 985, 183: 990, 184: 987, 185: 979, 186: 974, 187: 983, 188: 990, 189: 994, 190: 986, 191: 977, 192: 987, 193: 987, 194: 995, 195: 998, 196: 995, 197: 1004, 198: 1000, 199: 994, 200: 990, 201: 996, 202: 991, 203: 998, 204: 991, 205: 999, 206: 989, 207: 991, 208: 994, 209: 990, 210: 997, 211: 999, 212: 1008, 213: 1002, 214: 1009, 215: 1019, 216: 1021, 217: 1026, 218: 1030, 219: 1021, 220: 1022, 221: 1022, 222: 1028, 223: 1035, 224: 1044, 225: 1051, 226: 1050, 227: 1045, 228: 1052, 229: 1042, 230: 1035, 231: 1033, 232: 1033, 233: 1031, 234: 1025, 235: 1018, 236: 1013, 237: 1004, 238: 1003, 239: 1004, 240: 1001, 241: 994, 242: 997, 243: 996, 244: 997, 245: 999, 246: 1001, 247: 991, 248: 1001, 249: 994, 250: 987, 251: 978, 252: 975, 253: 976, 254: 982, 255: 990, 256: 981, 257: 978, 258: 978, 259: 973, 260: 979, 261: 980, 262: 972, 263: 972, 264: 965, 265: 968, 266: 961, 267: 953, 268: 953, 269: 955, 270: 957, 271: 959, 272: 968, 273: 972, 274: 966, 275: 972, 276: 962, 277: 953, 278: 961, 279: 956, 280: 950, 281: 952, 282: 959, 283: 954, 284: 960, 285: 960, 286: 955, 287: 954, 288: 961, 289: 953, 290: 949, 291: 946, 292: 936, 293: 933, 294: 940, 295: 947, 296: 949, 297: 954, 298: 957, 299: 959, 300: 969, 301: 962, 302: 956, 303: 964, 304: 970, 305: 967, 306: 963, 307: 967, 308: 975, 309: 976, 310: 976, 311: 984, 312: 977, 313: 967, 314: 963, 315: 959, 316: 955, 317: 952, 318: 952, 319: 953, 320: 946, 321: 951, 322: 944, 323: 941, 324: 936, 325: 946, 326: 944, 327: 943, 328: 939, 329: 929, 330: 926, 331: 918, 332: 911, 333: 913, 334: 922, 335: 922, 336: 929, 337: 929, 338: 920, 339: 926, 340: 926, 341: 923, 342: 915, 343: 911, 344: 901, 345: 904, 346: 898, 347: 889, 348: 895, 349: 897, 350: 892, 351: 885, 352: 894, 353: 887, 354: 892, 355: 884, 356: 887, 357: 881, 358: 874, 359: 884}

    short = 1
    how_many_points = 3


    time = list(range(len(df)))
    plt.plot(time, df.values())

    peak,truf = gen_peaks(df)
    graph(df,0,360,peak,truf,short)
    mxmn = sorted(zip(mx,mn,short_not),key=lambda x:money(x[0],x[1]),reverse=True)[:how_many_points]
    mx, mn ,sn= zip(*mxmn)
    plt.scatter(time,scatmake(df,mx),c='g')
    plt.scatter(time,scatmake(df,mn),c='r')
    plt.legend(['Stock','Sell','Buy'])
    plt.xlabel('Time')
    plt.ylabel('Stock price')
    plt.show()
    print('Point1,point2, isshort','money u made')
    for grp in zip(mx,mn,sn):
        print(*grp,money(grp[0],grp[1]))
